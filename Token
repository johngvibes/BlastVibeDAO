// Ensure the necessary packages are installed by running:
// npm install @thirdweb-dev/sdk ethers

import { ThirdwebSDK } from "@thirdweb-dev/sdk";
import { BlastSepoliaTestnet } from "@thirdweb-dev/chains";
import dotenv from 'dotenv';
dotenv.config();

// Initialize the Thirdweb SDK for the BlastSepoliaTestnet
const sdk = new ThirdwebSDK(BlastSepoliaTestnet, {
  privateKey: process.env.PRIVATE_KEY, // Loaded from .env file
});

// ERC-20 and DAO Contract address on BlastSepoliaTestnet
const contractAddress = "0xa6b4B9a8E4028B8D345070ACF250ca82a573694c";

async function main() {
  const contract = await sdk.getContract(contractAddress);

  // Query the token balance of the current account
  async function queryBalance() {
    try {
      const walletAddress = sdk.wallet.address; // Get the current wallet address
      const balance = await contract.erc20.balanceOf(walletAddress);
      console.log(`Balance of ${walletAddress} is ${balance.displayValue} ${balance.symbol}`);
    } catch (error) {
      console.error("Error querying balance:", error);
    }
  }

  // Generic function to cast a vote (assuming a simple voting mechanism)
  async function castVote(proposalId, support) {
    try {
      // Assuming a function 'vote' exists with parameters proposalId and support
      const tx = await contract.vote(proposalId, support); // This line is hypothetical and depends on your contract's API
      console.log(`Voted on proposal ${proposalId} with support: ${support}. Transaction Hash: ${tx.hash}`);
    } catch (error) {
      console.error("Error casting vote:", error);
    }
  }

  await queryBalance(); // Query and log the balance of the current account

  // Hypothetical example of casting a vote, assuming proposalId 1 exists and you want to support it
  await castVote(1, true);
}

main().catch(console.error);
